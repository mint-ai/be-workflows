name: Build, test and upload

on:
  workflow_call:
    inputs:
      registry:
        required: true
        type: string
      repository:
        required: true
        type: string
      aws-domain:
        required: true
        type: string
      aws-domain-owner:
        required: true
        type: string
      aws-role:
        required: true
        type: string
      aws-region:
        required: true
        type: string
      sonar:
        type: boolean
        required: false
        default: true

permissions:
  id-token: write
  contents: read

jobs:
  build-test-upload:
    name: Build, test and upload new artifact

    runs-on: ubuntu-latest

    env:
      POSTGRES_DB: myn
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test
      REGISTRY: ${{ inputs.registry }}
      REPOSITORY: ${{ inputs.repository }}

    services:
      postgres_main:
        image: postgres:10-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set IMAGE_NAME
        run: |
          GIT_SHORT_REV=$(git rev-parse --short HEAD)
          echo "IMAGE_NAME=$REGISTRY/$REPOSITORY:$GIT_SHORT_REV" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: ${{ inputs.aws-role }}

      - name: Generate CodeArtifact password
        id: codeartifact-password-generator
        run: |
          export CODEARTIFACT_PASSWORD=$(aws codeartifact get-authorization-token --domain-owner ${{ inputs.aws-domain-owner }} --domain ${{ inputs.aws-domain }} --query 'authorizationToken' --output text)
          echo "::add-mask::$CODEARTIFACT_PASSWORD"
          echo "codeartifact_password=$CODEARTIFACT_PASSWORD" >> $GITHUB_OUTPUT
      - uses: docker/build-push-action@v2
        with:
          context: .
          build-args: POETRY_HTTP_BASIC_CODEARTIFACT_PASSWORD=${{ steps.codeartifact-password-generator.outputs.codeartifact_password }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ env.IMAGE_NAME }}
          load: true

      - name: Get Python changed files
        id: changed-py-files
        uses: tj-actions/changed-files@v35
        with:
          files: |
            *.py
            **/*.py
          sha: ${{ github.event.pull_request.head.sha }}

      - name: Run black
        if: steps.changed-py-files.outputs.any_changed == 'true'
        run: |
          docker run --entrypoint "" ${{ env.IMAGE_NAME }} black --target-version py310 -S --check /usr/src/app

      - name: Run isort
        if: ${{ steps.changed-py-files.outputs.any_changed == 'true' && success() || failure() }}
        run: |
          docker run --entrypoint "" ${{ env.IMAGE_NAME }} isort --check-only --profile black ${{ steps.changed-py-files.outputs.all_changed_files }}

      - name: Run flake8
        if: ${{steps.changed-py-files.outputs.any_changed == 'true' && success() || failure() }}
        run: |
          docker run --entrypoint "" ${{ env.IMAGE_NAME }} flake8 ${{ steps.changed-py-files.outputs.all_changed_files }}

      - name: Run mypy
        if: ${{ steps.changed-py-files.outputs.any_changed == 'true' && success() || failure() }}
        run: |
          docker run --entrypoint "" ${{ env.IMAGE_NAME }} mypy ${{ steps.changed-py-files.outputs.all_changed_files }}

      - name: Run tests
        if: success()
        run: |
          docker-compose run --name main_container test tests

      - name: Copy coverage.xml
        continue-on-error: true
        run: docker cp main_container:/home/app/coverage.xml ./coverage.xml;

      - name: Sonarqube
        if: inputs.sonar
        uses: sonarsource/sonarqube-scan-action@master
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push ${{ env.IMAGE_NAME }} to Amazon ECR
        run: docker push ${{ env.IMAGE_NAME }}